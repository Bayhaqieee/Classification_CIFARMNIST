{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "15f4708e",
   "metadata": {
    "papermill": {
     "duration": 0.002532,
     "end_time": "2025-07-16T08:31:32.330750",
     "exception": false,
     "start_time": "2025-07-16T08:31:32.328218",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "60c0110c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:31:32.335858Z",
     "iopub.status.busy": "2025-07-16T08:31:32.335662Z",
     "iopub.status.idle": "2025-07-16T08:31:41.785033Z",
     "shell.execute_reply": "2025-07-16T08:31:41.784271Z"
    },
    "papermill": {
     "duration": 9.453341,
     "end_time": "2025-07-16T08:31:41.786457",
     "exception": false,
     "start_time": "2025-07-16T08:31:32.333116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import matplotlib.pylab as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e668a286",
   "metadata": {
    "papermill": {
     "duration": 0.001909,
     "end_time": "2025-07-16T08:31:41.790744",
     "exception": false,
     "start_time": "2025-07-16T08:31:41.788835",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "244ac306",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:31:41.795738Z",
     "iopub.status.busy": "2025-07-16T08:31:41.795472Z",
     "iopub.status.idle": "2025-07-16T08:31:41.799690Z",
     "shell.execute_reply": "2025-07-16T08:31:41.799128Z"
    },
    "papermill": {
     "duration": 0.007858,
     "end_time": "2025-07-16T08:31:41.800692",
     "exception": false,
     "start_time": "2025-07-16T08:31:41.792834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define transformation with data augmentation\n",
    "transform_train = transforms.Compose([\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomCrop(32, padding=4),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67432c3b",
   "metadata": {
    "papermill": {
     "duration": 0.001883,
     "end_time": "2025-07-16T08:31:41.804609",
     "exception": false,
     "start_time": "2025-07-16T08:31:41.802726",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Wrangling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "09b915e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:31:41.809542Z",
     "iopub.status.busy": "2025-07-16T08:31:41.809153Z",
     "iopub.status.idle": "2025-07-16T08:31:48.782705Z",
     "shell.execute_reply": "2025-07-16T08:31:48.781716Z"
    },
    "papermill": {
     "duration": 6.977568,
     "end_time": "2025-07-16T08:31:48.784117",
     "exception": false,
     "start_time": "2025-07-16T08:31:41.806549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 170M/170M [00:03<00:00, 49.8MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Data Size: 50000\n",
      "Test Data Size: 10000\n"
     ]
    }
   ],
   "source": [
    "# Load CIFAR-10 dataset\n",
    "train_dataset = datasets.CIFAR10(root=\"./data\", train=True, download=True, transform=transform_train)\n",
    "test_dataset = datasets.CIFAR10(root=\"./data\", train=False, download=True, transform=transform_test)\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
    "\n",
    "print(f\"Training Data Size: {len(train_dataset)}\")\n",
    "print(f\"Test Data Size: {len(test_dataset)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "959a0f12",
   "metadata": {
    "papermill": {
     "duration": 0.003652,
     "end_time": "2025-07-16T08:31:48.792165",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.788513",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Development"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcb5f9a5",
   "metadata": {
    "papermill": {
     "duration": 0.003407,
     "end_time": "2025-07-16T08:31:48.799382",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.795975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Arch Build"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c66e5cc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:31:48.807557Z",
     "iopub.status.busy": "2025-07-16T08:31:48.807226Z",
     "iopub.status.idle": "2025-07-16T08:31:48.907932Z",
     "shell.execute_reply": "2025-07-16T08:31:48.907024Z"
    },
    "papermill": {
     "duration": 0.106335,
     "end_time": "2025-07-16T08:31:48.909372",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.803037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EnhancedCNN(\n",
      "  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  (dropout): Dropout(p=0.5, inplace=False)\n",
      "  (fc1): Linear(in_features=2304, out_features=120, bias=True)\n",
      "  (fc2): Linear(in_features=120, out_features=84, bias=True)\n",
      "  (fc3): Linear(in_features=84, out_features=10, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "class EnhancedCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(EnhancedCNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 6, 5)\n",
    "        self.bn1 = nn.BatchNorm2d(6)\n",
    "        self.conv2 = nn.Conv2d(6, 16, 5)\n",
    "        self.bn2 = nn.BatchNorm2d(16)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "        # Calculate the size of the output from the convolutional layers dynamically\n",
    "        self._calculate_conv_output()\n",
    "        \n",
    "        self.fc1 = nn.Linear(self.conv_output_size, 120)\n",
    "        self.fc2 = nn.Linear(120, 84)\n",
    "        self.fc3 = nn.Linear(84, 10)\n",
    "    \n",
    "    def _calculate_conv_output(self):\n",
    "        # Dummy input tensor with the same size as the input images\n",
    "        dummy_input = torch.zeros(1, 3, 32, 32)\n",
    "        with torch.no_grad():\n",
    "            output = self.pool(F.relu(self.bn2(self.conv2(F.relu(self.bn1(self.conv1(dummy_input)))))))\n",
    "        self.conv_output_size = output.numel()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.bn1(self.conv1(x)))\n",
    "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        x = F.relu(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "model = EnhancedCNN()\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae91796",
   "metadata": {
    "papermill": {
     "duration": 0.004142,
     "end_time": "2025-07-16T08:31:48.917989",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.913847",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Loss Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e0ce42bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:31:48.925560Z",
     "iopub.status.busy": "2025-07-16T08:31:48.925158Z",
     "iopub.status.idle": "2025-07-16T08:31:48.929066Z",
     "shell.execute_reply": "2025-07-16T08:31:48.928346Z"
    },
    "papermill": {
     "duration": 0.008786,
     "end_time": "2025-07-16T08:31:48.930092",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.921306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define loss function adn optimizer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=1e-5)\n",
    "\n",
    "training_loss = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce7d141a",
   "metadata": {
    "papermill": {
     "duration": 0.003465,
     "end_time": "2025-07-16T08:31:48.937965",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.934500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "08649d4d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-16T08:31:48.946350Z",
     "iopub.status.busy": "2025-07-16T08:31:48.945917Z",
     "iopub.status.idle": "2025-07-16T08:57:00.991958Z",
     "shell.execute_reply": "2025-07-16T08:57:00.990967Z"
    },
    "papermill": {
     "duration": 1512.109251,
     "end_time": "2025-07-16T08:57:01.050856",
     "exception": false,
     "start_time": "2025-07-16T08:31:48.941605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1, Loss: 2.2085\n",
      "Epoch 2, Loss: 2.0487\n",
      "Epoch 3, Loss: 1.9613\n",
      "Epoch 4, Loss: 1.8984\n",
      "Epoch 5, Loss: 1.8485\n",
      "Epoch 6, Loss: 1.8093\n",
      "Epoch 7, Loss: 1.7818\n",
      "Epoch 8, Loss: 1.7570\n",
      "Epoch 9, Loss: 1.7330\n",
      "Epoch 10, Loss: 1.7129\n",
      "Epoch 11, Loss: 1.6962\n",
      "Epoch 12, Loss: 1.6750\n",
      "Epoch 13, Loss: 1.6597\n",
      "Epoch 14, Loss: 1.6463\n",
      "Epoch 15, Loss: 1.6308\n",
      "Epoch 16, Loss: 1.6166\n",
      "Epoch 17, Loss: 1.6093\n",
      "Epoch 18, Loss: 1.5978\n",
      "Epoch 19, Loss: 1.5866\n",
      "Epoch 20, Loss: 1.5808\n",
      "Epoch 21, Loss: 1.5661\n",
      "Epoch 22, Loss: 1.5576\n",
      "Epoch 23, Loss: 1.5502\n",
      "Epoch 24, Loss: 1.5410\n",
      "Epoch 25, Loss: 1.5268\n",
      "Epoch 26, Loss: 1.5207\n",
      "Epoch 27, Loss: 1.5212\n",
      "Epoch 28, Loss: 1.5120\n",
      "Epoch 29, Loss: 1.5027\n",
      "Epoch 30, Loss: 1.4967\n",
      "Epoch 31, Loss: 1.4916\n",
      "Epoch 32, Loss: 1.4823\n",
      "Epoch 33, Loss: 1.4761\n",
      "Epoch 34, Loss: 1.4701\n",
      "Epoch 35, Loss: 1.4628\n",
      "Epoch 36, Loss: 1.4559\n",
      "Epoch 37, Loss: 1.4494\n",
      "Epoch 38, Loss: 1.4453\n",
      "Epoch 39, Loss: 1.4402\n",
      "Epoch 40, Loss: 1.4298\n",
      "Epoch 41, Loss: 1.4319\n",
      "Epoch 42, Loss: 1.4230\n",
      "Epoch 43, Loss: 1.4198\n",
      "Epoch 44, Loss: 1.4129\n",
      "Epoch 45, Loss: 1.4112\n",
      "Epoch 46, Loss: 1.4024\n",
      "Epoch 47, Loss: 1.4007\n",
      "Epoch 48, Loss: 1.3973\n",
      "Epoch 49, Loss: 1.3876\n",
      "Epoch 50, Loss: 1.3828\n"
     ]
    }
   ],
   "source": [
    "# Training Loop\n",
    "def train_model(model, train_loader, criterion, optimizer, epochs=50):\n",
    "    model.train()\n",
    "    for epoch in range(epochs):\n",
    "        running_loss = 0.0\n",
    "        for images, labels in train_loader:\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss.item()\n",
    "        epoch_loss = running_loss / len(train_loader)\n",
    "        training_loss.append(epoch_loss)\n",
    "        print(f\"Epoch {epoch+1}, Loss: {epoch_loss:.4f}\")\n",
    "        \n",
    "train_model(model, train_loader, criterion, optimizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f98536e0",
   "metadata": {
    "papermill": {
     "duration": 0.005647,
     "end_time": "2025-07-16T08:57:01.062697",
     "exception": false,
     "start_time": "2025-07-16T08:57:01.057050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "99558ac5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:57:01.074937Z",
     "iopub.status.busy": "2025-07-16T08:57:01.074669Z",
     "iopub.status.idle": "2025-07-16T08:57:04.151961Z",
     "shell.execute_reply": "2025-07-16T08:57:04.151115Z"
    },
    "papermill": {
     "duration": 3.084847,
     "end_time": "2025-07-16T08:57:04.153261",
     "exception": false,
     "start_time": "2025-07-16T08:57:01.068414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 57.64%\n"
     ]
    }
   ],
   "source": [
    "# Evaluation loop\n",
    "def evaluate_model(model, test_loader):\n",
    "    model.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    with torch.no_grad():\n",
    "        for images, labels in test_loader:\n",
    "            outputs = model(images)\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "    print(f\"Test Accuracy: {100 * correct / total:.2f}%\")\n",
    "    \n",
    "evaluate_model(model, test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b4550dcf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-16T08:57:04.168952Z",
     "iopub.status.busy": "2025-07-16T08:57:04.168720Z",
     "iopub.status.idle": "2025-07-16T08:57:04.445204Z",
     "shell.execute_reply": "2025-07-16T08:57:04.444499Z"
    },
    "papermill": {
     "duration": 0.285393,
     "end_time": "2025-07-16T08:57:04.446542",
     "exception": false,
     "start_time": "2025-07-16T08:57:04.161149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(training_loss, label=\"Training Loss\")\n",
    "plt.title('Loss Curve')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1539.044273,
   "end_time": "2025-07-16T08:57:06.983226",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-16T08:31:27.938953",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
