{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8a7265b6",
   "metadata": {
    "papermill": {
     "duration": 0.002596,
     "end_time": "2025-07-15T18:32:17.474075",
     "exception": false,
     "start_time": "2025-07-15T18:32:17.471479",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "698e923c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:32:17.479833Z",
     "iopub.status.busy": "2025-07-15T18:32:17.479310Z",
     "iopub.status.idle": "2025-07-15T18:32:30.860229Z",
     "shell.execute_reply": "2025-07-15T18:32:30.859562Z"
    },
    "papermill": {
     "duration": 13.385184,
     "end_time": "2025-07-15T18:32:30.861758",
     "exception": false,
     "start_time": "2025-07-15T18:32:17.476574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import matplotlib.pylab as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cac6ab61",
   "metadata": {
    "papermill": {
     "duration": 0.001881,
     "end_time": "2025-07-15T18:32:30.866074",
     "exception": false,
     "start_time": "2025-07-15T18:32:30.864193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e143f142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:32:30.871251Z",
     "iopub.status.busy": "2025-07-15T18:32:30.870962Z",
     "iopub.status.idle": "2025-07-15T18:32:30.875268Z",
     "shell.execute_reply": "2025-07-15T18:32:30.874622Z"
    },
    "papermill": {
     "duration": 0.008003,
     "end_time": "2025-07-15T18:32:30.876341",
     "exception": false,
     "start_time": "2025-07-15T18:32:30.868338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define transformation with data augmentation\n",
    "transform_train = transforms.Compose([\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomCrop(32, padding=4),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
    "])\n",
    "\n",
    "transform_test = transforms.Compose([\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb1a38af",
   "metadata": {
    "papermill": {
     "duration": 0.001882,
     "end_time": "2025-07-15T18:32:30.880324",
     "exception": false,
     "start_time": "2025-07-15T18:32:30.878442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Wrangling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9e2a612e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:32:30.885372Z",
     "iopub.status.busy": "2025-07-15T18:32:30.885177Z",
     "iopub.status.idle": "2025-07-15T18:32:36.060056Z",
     "shell.execute_reply": "2025-07-15T18:32:36.059242Z"
    },
    "papermill": {
     "duration": 5.178761,
     "end_time": "2025-07-15T18:32:36.061237",
     "exception": false,
     "start_time": "2025-07-15T18:32:30.882476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 170M/170M [00:01<00:00, 92.8MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Data Size: 50000\n",
      "Test Data Size: 10000\n"
     ]
    }
   ],
   "source": [
    "# Load CIFAR-10 dataset\n",
    "train_dataset = datasets.CIFAR10(root=\"./data\", train=True, download=True, transform=transform_train)\n",
    "test_dataset = datasets.CIFAR10(root=\"./data\", train=False, download=True, transform=transform_test)\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
    "\n",
    "print(f\"Training Data Size: {len(train_dataset)}\")\n",
    "print(f\"Test Data Size: {len(test_dataset)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3339ef8b",
   "metadata": {
    "papermill": {
     "duration": 0.002882,
     "end_time": "2025-07-15T18:32:36.067524",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.064642",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Development"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7e9d742",
   "metadata": {
    "papermill": {
     "duration": 0.002679,
     "end_time": "2025-07-15T18:32:36.073324",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.070645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Arch Build"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6ec19ba2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:32:36.079954Z",
     "iopub.status.busy": "2025-07-15T18:32:36.079757Z",
     "iopub.status.idle": "2025-07-15T18:32:36.252850Z",
     "shell.execute_reply": "2025-07-15T18:32:36.251902Z"
    },
    "papermill": {
     "duration": 0.177987,
     "end_time": "2025-07-15T18:32:36.254157",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.076170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EnhancedCNN(\n",
      "  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  (dropout): Dropout(p=0.5, inplace=False)\n",
      "  (fc1): Linear(in_features=2304, out_features=120, bias=True)\n",
      "  (fc2): Linear(in_features=120, out_features=84, bias=True)\n",
      "  (fc3): Linear(in_features=84, out_features=10, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "class EnhancedCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(EnhancedCNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 6, 5)\n",
    "        self.bn1 = nn.BatchNorm2d(6)\n",
    "        self.conv2 = nn.Conv2d(6, 16, 5)\n",
    "        self.bn2 = nn.BatchNorm2d(16)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "        \n",
    "        # Calculate the size of the output from the convolutional layers dynamically\n",
    "        self._calculate_conv_output()\n",
    "        \n",
    "        self.fc1 = nn.Linear(self.conv_output_size, 120)\n",
    "        self.fc2 = nn.Linear(120, 84)\n",
    "        self.fc3 = nn.Linear(84, 10)\n",
    "    \n",
    "    def _calculate_conv_output(self):\n",
    "        # Dummy input tensor with the same size as the input images\n",
    "        dummy_input = torch.zeros(1, 3, 32, 32)\n",
    "        with torch.no_grad():\n",
    "            output = self.pool(F.relu(self.bn2(self.conv2(F.relu(self.bn1(self.conv1(dummy_input)))))))\n",
    "        self.conv_output_size = output.numel()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.bn1(self.conv1(x)))\n",
    "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        x = F.relu(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "model = EnhancedCNN()\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84c0cf50",
   "metadata": {
    "papermill": {
     "duration": 0.00403,
     "end_time": "2025-07-15T18:32:36.262749",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.258719",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Loss Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e6af495e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:32:36.270516Z",
     "iopub.status.busy": "2025-07-15T18:32:36.270284Z",
     "iopub.status.idle": "2025-07-15T18:32:36.274096Z",
     "shell.execute_reply": "2025-07-15T18:32:36.273452Z"
    },
    "papermill": {
     "duration": 0.00886,
     "end_time": "2025-07-15T18:32:36.275184",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.266324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define loss function adn optimizer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "training_loss = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0749a33b",
   "metadata": {
    "papermill": {
     "duration": 0.002846,
     "end_time": "2025-07-15T18:32:36.282104",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.279258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3bbf35d6",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-15T18:32:36.288770Z",
     "iopub.status.busy": "2025-07-15T18:32:36.288567Z",
     "iopub.status.idle": "2025-07-15T18:44:00.288314Z",
     "shell.execute_reply": "2025-07-15T18:44:00.287506Z"
    },
    "papermill": {
     "duration": 684.008908,
     "end_time": "2025-07-15T18:44:00.293903",
     "exception": false,
     "start_time": "2025-07-15T18:32:36.284995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1, Loss: 1.7887\n",
      "Epoch 2, Loss: 1.5911\n",
      "Epoch 3, Loss: 1.5073\n",
      "Epoch 4, Loss: 1.4474\n",
      "Epoch 5, Loss: 1.4061\n",
      "Epoch 6, Loss: 1.3752\n",
      "Epoch 7, Loss: 1.3458\n",
      "Epoch 8, Loss: 1.3292\n",
      "Epoch 9, Loss: 1.3048\n",
      "Epoch 10, Loss: 1.2938\n",
      "Epoch 11, Loss: 1.2784\n",
      "Epoch 12, Loss: 1.2685\n",
      "Epoch 13, Loss: 1.2548\n",
      "Epoch 14, Loss: 1.2584\n",
      "Epoch 15, Loss: 1.2427\n",
      "Epoch 16, Loss: 1.2401\n",
      "Epoch 17, Loss: 1.2336\n",
      "Epoch 18, Loss: 1.2281\n",
      "Epoch 19, Loss: 1.2229\n",
      "Epoch 20, Loss: 1.2220\n"
     ]
    }
   ],
   "source": [
    "# Training Loop\n",
    "def train_model(model, train_loader, criterion, optimizer, epochs=20):\n",
    "    model.train()\n",
    "    for epoch in range(epochs):\n",
    "        running_loss = 0.0\n",
    "        for images, labels in train_loader:\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss.item()\n",
    "        epoch_loss = running_loss / len(train_loader)\n",
    "        training_loss.append(epoch_loss)\n",
    "        print(f\"Epoch {epoch+1}, Loss: {epoch_loss:.4f}\")\n",
    "        \n",
    "train_model(model, train_loader, criterion, optimizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8fbd71f",
   "metadata": {
    "papermill": {
     "duration": 0.004237,
     "end_time": "2025-07-15T18:44:00.302771",
     "exception": false,
     "start_time": "2025-07-15T18:44:00.298534",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "810ccb20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:44:00.312698Z",
     "iopub.status.busy": "2025-07-15T18:44:00.312434Z",
     "iopub.status.idle": "2025-07-15T18:44:03.905591Z",
     "shell.execute_reply": "2025-07-15T18:44:03.904661Z"
    },
    "papermill": {
     "duration": 3.600016,
     "end_time": "2025-07-15T18:44:03.907060",
     "exception": false,
     "start_time": "2025-07-15T18:44:00.307044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 62.33%\n"
     ]
    }
   ],
   "source": [
    "# Evaluation loop\n",
    "def evaluate_model(model, test_loader):\n",
    "    model.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    with torch.no_grad():\n",
    "        for images, labels in test_loader:\n",
    "            outputs = model(images)\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "    print(f\"Test Accuracy: {100 * correct / total:.2f}%\")\n",
    "    \n",
    "evaluate_model(model, test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "450ca5fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T18:44:03.919289Z",
     "iopub.status.busy": "2025-07-15T18:44:03.919004Z",
     "iopub.status.idle": "2025-07-15T18:44:04.398294Z",
     "shell.execute_reply": "2025-07-15T18:44:04.397474Z"
    },
    "papermill": {
     "duration": 0.487082,
     "end_time": "2025-07-15T18:44:04.399706",
     "exception": false,
     "start_time": "2025-07-15T18:44:03.912624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(training_loss, label=\"Training Loss\")\n",
    "plt.title('Loss Curve')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 715.337499,
   "end_time": "2025-07-15T18:44:07.091049",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-15T18:32:11.753550",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
